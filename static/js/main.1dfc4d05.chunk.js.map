{"version":3,"sources":["title.svg","recepie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recepie","title","calories","img","ingredients","className","src","alt","toFixed","map","items","key","text","App","useState","search","setSearch","recepies","setRecepie","query","setQuery","noData","setData","useEffect","trackPromise","getRecipie","promiseInProgress","usePromiseTracker","a","fetch","process","response","json","recipieData","hits","length","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","image","Boolean","window","location","hostname","match","LoadingIndicator","props","console","log","style","width","height","display","justifyContent","alignItems","color","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,mC,6NCyB5BC,G,MArBC,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,MAAMC,EAA6B,EAA7BA,SAASC,EAAoB,EAApBA,IAAIC,EAAgB,EAAhBA,YACjC,OACI,6BAASC,UAAU,WACf,4BAAQA,UAAU,eAAeJ,GACjC,kBAAC,IAAD,KACA,yBAAKK,IAAOH,EAAKI,IAAI,IAAIF,UAAU,cAEnC,yCAAeH,EAASM,QAAQ,IAChC,wBAAIH,UAAU,eAEND,EAAYK,KAAI,SAAAC,GAAK,OAEjB,wBAAIC,IAAKD,EAAML,WACdK,EAAME,a,gCCkGhBC,EA3GH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDC,EADC,OAEeF,mBAAS,IAFxB,mBAETG,EAFS,KAECC,EAFD,OAGUJ,mBAAS,UAHnB,mBAGTK,EAHS,KAGFC,EAHE,OAIUN,mBAAS,IAJnB,mBAITO,EAJS,KAIDC,EAJC,KAMhBC,qBAAU,WAERC,uBAAaC,OACZ,CAACN,IATY,IAURO,EAAsBC,8BAAtBD,kBAaFD,EAAU,uCAAG,8BAAAG,EAAA,6DACjBN,EAAQ,IADS,kBAGQO,MAAM,mCAAD,OACSV,EADT,mBACyBW,WADzB,oBAC6DA,uCAJ1E,cAGTC,EAHS,gBAOWA,EAASC,OAPpB,OAOTC,EAPS,OAQff,EAAWe,EAAYC,MACnBD,EAAYC,KAAKC,QAAU,EAC7Bb,EAAQ,mBAERA,EAAQ,IAZK,kDAefA,EAAQ,6BAfO,0DAAH,qDA8BhB,OACE,yBAAKjB,UAAU,OACb,kBAAC,IAAD,KACE,yBAAKA,UAAU,aAGb,yBAAKC,IAAKL,IAAOM,IAAI,UAAY,IACjC,yBAAKF,UAAU,QACb,6BACE,qCAEF,6BACE,qCAEF,6BACE,2CAMR,0BAAMA,UAAU,aAAa+B,SA3Bf,SAACC,GACjBA,EAAEC,iBACFlB,EAASL,GACTC,EAAU,MAyBN,2BACEX,UAAU,SACVkC,KAAK,OACLC,MAAOzB,EACP0B,SApCa,SAACJ,GACpBrB,EAAUqB,EAAEK,OAAOF,UAqCf,4BACEnC,UAAU,eACVkC,KAAK,SACLtC,MAAM,uCAHR,WAQF,2BAAIoB,GACHK,EAYC,KAXF,6BAASrB,UAAU,WAChBY,EAASR,KAAI,SAACT,GAAD,OACZ,kBAAC,EAAD,CACEW,IAAKX,EAAQ2C,OAAOC,MACpB3C,MAAOD,EAAQ2C,OAAOC,MACtB1C,SAAUF,EAAQ2C,OAAOzC,SACzBC,IAAKH,EAAQ2C,OAAOE,MACpBzC,YAAaJ,EAAQ2C,OAAOvC,oB,iBC9FpB0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPN,IAAMC,EAAmB,SAAAC,GAAU,IACzB1B,EAAsBC,8BAAtBD,kBAEL,OADH2B,QAAQC,IAAI,eAEN5B,GACA,yBACE6B,MAAO,CACPC,MAAO,OACPC,OAAQ,MACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WACf,kBAAC,IAAD,CAAQrB,KAAK,eAAesB,MAAM,UAAUJ,OAAO,MAAMD,MAAM,UAKtEM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.1dfc4d05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/title.64fdb5b9.svg\";","import React from 'react';\r\nimport Tilt from 'react-parallax-tilt';\r\n// import Style from './recepie.css'\r\nimport './recepie.css'\r\nconst recepie = ({title,calories,img,ingredients}) =>{\r\n    return(\r\n        <article className=\"recepie\">\r\n            <header className=\"card-header\">{title}</header>\r\n            <Tilt>\r\n            <img src = {img} alt=\" \" className=\"imgClass\"></img>\r\n            </Tilt>\r\n            <p>Calories : {calories.toFixed(0)}</p>\r\n            <ol className=\"ingrediants\">\r\n                {\r\n                    ingredients.map(items=>(\r\n                        \r\n                        <li key={items.className}>\r\n                        {items.text}\r\n                        </li>\r\n                    )\r\n                )}\r\n            </ol>\r\n        </article>\r\n    )\r\n};\r\nexport default recepie;\r\n\r\n","import React, { useEffect, useState } from \"react\";\n// import logo from './logo.svg';\nimport Recepies from \"./recepie\";\nimport \"./App.css\";\nimport { trackPromise ,usePromiseTracker} from \"react-promise-tracker\";\nimport title from \"./title.svg\";\nimport Tilt from \"react-parallax-tilt\";\n\nconst App = () => {\n  const [search, setSearch] = useState(\"\");\n  const [recepies, setRecepie] = useState([]);\n  const [query, setQuery] = useState(\"desert\");\n  const [noData, setData] = useState(\"\");\n\n  useEffect(() => {\n    // console.log(query);\n    trackPromise(getRecipie());\n  }, [query]);\n  const { promiseInProgress } = usePromiseTracker();\n  // const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  // const recog = new SpeechRecognition();\n\n  // recog.onStart = function(){\n  //   console.log(\"recog started\");\n  // }\n\n  // recog.onResult\n\n  // const ex_request = `https://api.edamam.com/search?q=${query}&app_id=${process.env.REACT_APP_ID}&app_key=${process.env.REACT_APP_API_KEY}`;\n  // console.log(\"url\",ex_request);\n\n  const getRecipie = async () => {\n    setData(\"\");\n    try {\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${process.env.REACT_APP_ID}&app_key=${process.env.REACT_APP_API_KEY}`\n      );\n\n      const recipieData = await response.json();\n      setRecepie(recipieData.hits);\n      if (recipieData.hits.length <= 0) {\n        setData(\"Nothing to show\");\n      } else {\n        setData(\"\");\n      }\n    } catch (error) {\n      setData(\"Error Not able to connect\");\n    }\n    // console.log(\"hits\", recipieData.hits);\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <Tilt>\n        <div className=\"container\">\n       \n        \n          <img src={title} alt=\"Title\"  />{\" \"}\n          <div className=\"flip\">\n            <div>\n              <div>Eat</div>\n            </div>\n            <div>\n              <div>Eat</div>\n            </div>\n            <div>\n              <div>Repeat</div>\n            </div>\n          </div>\n        </div>\n      </Tilt>\n\n      <form className=\"searchform\" onSubmit={getSearch}>\n        <input\n          className=\"search\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        ></input>\n        <button\n          className=\"searchSubmit\"\n          type=\"submit\"\n          title=\"click to search for the giver query\"\n        >\n                Search\n        </button>\n      </form>\n      <p>{noData}</p>\n     {!promiseInProgress ? \n      <section className=\"content\">\n        {recepies.map((recepie) => (\n          <Recepies\n            key={recepie.recipe.label}\n            title={recepie.recipe.label}\n            calories={recepie.recipe.calories}\n            img={recepie.recipe.image}\n            ingredients={recepie.recipe.ingredients}\n          />\n        ))}\n      </section>\n      : null }\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import Loader from \"react-promise-tracker\";\nimport { usePromiseTracker } from \"react-promise-tracker\";\nimport Loader from \"react-loader-spinner\";\nimport * as serviceWorker from './serviceWorker';\n\n\n\nconst LoadingIndicator = props => {\n  const { promiseInProgress } = usePromiseTracker();\n  console.log(\"in fetching\");\n     return (\n        promiseInProgress && \n        <div\n          style={{\n          width: \"100%\",\n          height: \"100\",\n          display: \"flex\",      \n          justifyContent: \"center\",\n          alignItems: \"center\"     }}   >    \n       <Loader type=\"BallTriangle\" color=\"#2BAD60\" height=\"100\" width=\"100\" />   \n       </div>\n    );  \n   }\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <LoadingIndicator/>\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}