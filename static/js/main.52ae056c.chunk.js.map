{"version":3,"sources":["title.svg","recepie.js","RecepieDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recepie","title","calories","img","ingredients","url","healthLabels","totalTime","digest","className","src","alt","toFixed","href","style","padding","map","label","key","items","text","RecepieDetail","closedetail","App","useState","search","setSearch","selected","setSelected","recepies","setRecepie","query","setQuery","noData","setData","useEffect","trackPromise","getRecipie","promiseInProgress","usePromiseTracker","a","fetch","process","response","json","recipieData","console","log","hits","length","onSubmit","e","preventDefault","type","value","onChange","target","image","recipe","onClick","Boolean","window","location","hostname","match","LoadingIndicator","props","width","height","display","justifyContent","alignItems","color","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.52ae056c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/title.64fdb5b9.svg\";","import React from 'react';\r\nimport Tilt from 'react-parallax-tilt';\r\n// import Style from './recepie.css'\r\nimport './recepie.css'\r\nconst recepie = ({title,calories,img,ingredients,url,healthLabels,digest,totalTime}) =>{\r\n    return(\r\n        <article className=\"recepie\">\r\n            <header className=\"card-header\">{title}</header>\r\n            <Tilt>\r\n            <img src = {img} alt=\" \" className=\"imgClass\"></img>\r\n            </Tilt>\r\n            <pr>Calories : {calories.toFixed(0)}  Time : {totalTime}</pr>\r\n          <pr><a href={url} style={{padding:\"5px\"}}>Source</a></pr>\r\n            {\r\n                healthLabels.map(label=>(\r\n                        \r\n                        <pr key={label}>\r\n                        {label}\r\n                        </pr>\r\n                    )\r\n                )\r\n                }\r\n           \r\n          \r\n            <ul className=\"ingrediants\">\r\n                {\r\n                    ingredients.map(items=>(\r\n                        \r\n                        <li key={items}>\r\n                        {items.text}\r\n                        </li>\r\n                    )\r\n                )\r\n                }\r\n            </ul>\r\n        </article>\r\n    )\r\n};\r\nexport default recepie;\r\n\r\n","import React from 'react';\r\nimport Tilt from 'react-parallax-tilt';\r\n// import Style from './recepie.css'\r\nimport './RecepieDetail.css'\r\nconst RecepieDetail = ({title,calories,img,ingredients,url,healthLabels,digest,totalTime,closedetail}) =>{\r\n    return(\r\n        <article className=\"recepie\">\r\n            <header className=\"card-header\">{title}</header>\r\n            <Tilt>\r\n            <img src = {img} alt=\" \" className=\"imgClass\"></img>\r\n            </Tilt>\r\n            <pr>Calories : {calories.toFixed(0)}  Time : {totalTime}</pr>\r\n          <pr><a href={url} style={{padding:\"5px\"}}>Source</a></pr>\r\n            {\r\n                healthLabels.map(label=>(\r\n                        \r\n                        <pr key={label}>\r\n                        {label}\r\n                        </pr>\r\n                    )\r\n                )\r\n                }\r\n           \r\n          \r\n            <ul className=\"ingrediants\">\r\n                {\r\n                    ingredients.map(items=>(\r\n                        \r\n                        <li key={items}>\r\n                        {items.text}\r\n                        </li>\r\n                    )\r\n                )\r\n                }\r\n            </ul>\r\n        </article>\r\n    )\r\n};\r\nexport default RecepieDetail;","import React, { useEffect, useState } from \"react\";\n// import logo from './logo.svg';\nimport Recepies from \"./recepie\";\nimport \"./App.css\";\nimport { trackPromise ,usePromiseTracker} from \"react-promise-tracker\";\nimport title from \"./title.svg\";\nimport Tilt from \"react-parallax-tilt\";\nimport RecepieDetail from \"./RecepieDetail\";\n\nconst App = () => {\n  const [search, setSearch] = useState(\"\");\n  const [selected, setSelected] = useState({});\n  const [recepies, setRecepie] = useState([]);\n  const [query, setQuery] = useState(\"desert\");\n  const [noData, setData] = useState(\"\");\n\n  useEffect(() => {\n    // console.log(query);\n    trackPromise(getRecipie());\n  }, [query]);\n  const { promiseInProgress } = usePromiseTracker();\n  // const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  // const recog = new SpeechRecognition();\n\n  // recog.onStart = function(){\n  //   console.log(\"recog started\");\n  // }\n\n  // recog.onResult\n\n  // const ex_request = `https://api.edamam.com/search?q=${query}&app_id=${process.env.REACT_APP_ID}&app_key=${process.env.REACT_APP_API_KEY}`;\n  // console.log(\"url\",ex_request);\n\n  const closedetail = ()=>{\n    setSelected({})\n  }\n \n  \n\n  const getRecipie = async () => {\n    setData(\"\");\n    try {\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${process.env.REACT_APP_ID}&app_key=${process.env.REACT_APP_API_KEY}`\n      );\n\n      const recipieData = await response.json();\nconsole.log(\"recipieData\", recipieData);\n      setRecepie(recipieData.hits);\n      if (recipieData.hits.length <= 0) {\n        setData(\"Nothing to show\");\n      } else {\n        setData(\"\");\n      }\n    } catch (error) {\n      setData(\"Error Not able to connect\");\n    }\n    // console.log(\"hits\", recipieData.hits);\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <Tilt>\n        <div className=\"container\">\n       \n        \n          <img src={title} alt=\"Title\"  />{\" \"}\n          <div className=\"flip\">\n            <div>\n              <div>Eat</div>\n            </div>\n            <div>\n              <div>Eat</div>\n            </div>\n            <div>\n              <div>Repeat</div>\n            </div>\n          </div>\n        </div>\n      </Tilt>\n\n      <form className=\"searchform\" onSubmit={getSearch}>\n        <input\n          className=\"search\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        ></input>\n        <button\n          className=\"searchSubmit\"\n          type=\"submit\"\n          title=\"click to search for the given query\"\n        >\n         <p className=\"text1\">Search</p>\n        </button>\n      </form>\n      <p>{noData}</p>\n     {!promiseInProgress ? \n      <section className=\"content\">\n      {\n        \n          typeof selected.title!=\"undefined\" ?  \n          <RecepieDetail\n              key={selected.label}\n              title={selected.label}\n              calories={selected.calories}\n              img={selected.image}\n              ingredients={selected.ingredients}\n              url={selected.url}\n              totalTime={selected.totalTime}\n              digest={selected.digest}\n              healthLabels={selected.healthLabels}\n              closedetail={closedetail}\n          />\n          :\n        recepies.map((recepie) => (\n          <Recepies\n            key={recepie.recipe.label}\n            title={recepie.recipe.label}\n            calories={recepie.recipe.calories}\n            img={recepie.recipe.image}\n            ingredients={recepie.recipe.ingredients}\n            url={recepie.recipe.url}\n            totalTime={recepie.recipe.totalTime}\n            digest={recepie.recipe.digest}\n            healthLabels={recepie.recipe.healthLabels}\n            onClick={()=>setSelected(recepie.recipe)}\n          />\n        ))\n      }\n    \n      \n      </section>\n      : null }\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import Loader from \"react-promise-tracker\";\nimport { usePromiseTracker } from \"react-promise-tracker\";\nimport Loader from \"react-loader-spinner\";\nimport * as serviceWorker from './serviceWorker';\n\n\n\nconst LoadingIndicator = props => {\n  const { promiseInProgress } = usePromiseTracker();\n  console.log(\"in fetching\");\n     return (\n        promiseInProgress && \n        <div\n          style={{\n          width: \"100%\",\n          height: \"100\",\n          display: \"flex\",      \n          justifyContent: \"center\",\n          alignItems: \"center\"     }}   >    \n       <Loader type=\"BallTriangle\" color=\"#2BAD60\" height=\"100\" width=\"100\" />   \n       </div>\n    );  \n   }\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <LoadingIndicator/>\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}