{"version":3,"sources":["recepie.js","App.js","serviceWorker.js","index.js"],"names":["recepie","title","calories","img","ingredients","className","Style","src","alt","map","items","text","App","useState","search","setSearch","recepies","setRecepie","query","setQuery","useEffect","getRecipie","ex_request","a","fetch","response","json","recipieData","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","recipe","label","image","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qTAkBeA,EAhBC,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,MAAMC,EAA6B,EAA7BA,SAASC,EAAoB,EAApBA,IAAIC,EAAgB,EAAhBA,YACjC,OACI,yBAAKC,UAAWC,IAAMN,SAClB,4BAAKC,GACL,yBAAKM,IAAMJ,EAAIK,IAAM,oBACrB,2BAAIN,GACJ,4BAEQE,EAAYK,KAAI,SAAAC,GAAK,OACjB,4BAAKA,EAAMC,SAHvB,OCsEGC,G,MAzEH,WAAO,IAAD,EAGYC,mBAAS,IAHrB,mBAGTC,EAHS,KAGDC,EAHC,OAIeF,mBAAS,IAJxB,mBAITG,EAJS,KAICC,EAJD,OAKUJ,mBAAS,WALnB,mBAKTK,EALS,KAKFC,EALE,KAOhBC,qBAAU,WAERC,MACC,CAACH,IAEJ,IAEMI,EAAU,0CAAsCR,EAAtC,mBAFL,WAEK,oBADJ,sCAINO,EAAU,uCAAG,8BAAAE,EAAA,sEACMC,MAAMF,GADZ,cACXG,EADW,gBAESA,EAASC,OAFlB,OAEXC,EAFW,OAGjBV,EAAWU,EAAYC,MACvBC,QAAQC,IAAIH,GAJK,2CAAH,qDAiBhB,OACE,yBAAKtB,UAAU,OAeb,0BAAMA,UAAU,aAAa0B,SAtBf,SAACC,GACjBA,EAAEC,iBACFd,EAASL,GACTC,EAAU,MAoBN,2BAAOV,UAAU,SAAS6B,KAAK,OAAOC,MAAOrB,EAAQsB,SA3BtC,SAACJ,GAClBjB,EAAUiB,EAAEK,OAAOF,UA2BjB,4BAAQ9B,UAAU,eAAe6B,KAAK,UAAtC,WAIF,yBAAK7B,UAAU,WAEbW,EAASP,KAAI,SAAAT,GAAO,OAClB,kBAAC,EAAD,CACEsC,IAAKtC,EAAQuC,OAAOC,MACpBvC,MAAOD,EAAQuC,OAAOC,MACtBtC,SAAUF,EAAQuC,OAAOrC,SACzBC,IAAKH,EAAQuC,OAAOE,MACpBrC,YAAaJ,EAAQuC,OAAOnC,qBCzDpBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.3be64b93.chunk.js","sourcesContent":["import React from 'react';\r\nimport Style from './recepie.css'\r\nconst recepie = ({title,calories,img,ingredients}) =>{\r\n    return(\r\n        <div className={Style.recepie}>\r\n            <h1>{title}</h1>\r\n            <img src ={img}alt = \"image of recepi\"></img>\r\n            <p>{calories}</p>\r\n            <ol>\r\n                {\r\n                    ingredients.map(items=>(\r\n                        <li>{items.text}</li>\r\n                    )\r\n                )};\r\n            </ol>\r\n        </div>\r\n    )\r\n};\r\nexport default recepie;\r\n\r\n","import React, { useEffect, useState } from 'react';\n// import logo from './logo.svg';\nimport Recepies from './recepie';\nimport './App.css';\n\nconst App = () => {\n\n\n  const [search, setSearch] = useState(\"\");\n  const [recepies, setRecepie] = useState([]);\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect(() => {\n    // console.log('zscfzd');\n    getRecipie();\n  }, [query]);\n\n  const id = 'da4035b1';\n  const key = 'e220d30109d1dd3fe4481a865697221d\t';\n  const ex_request = `https://api.edamam.com/search?q=${search}&app_id=${id}&app_key=${key}`;\n\n\n  const getRecipie = async () => {\n    const response = await fetch(ex_request);\n    const recipieData = await response.json();\n    setRecepie(recipieData.hits);\n    console.log(recipieData);\n  };\n\n  const updateSearch = (e) =>{\n      setSearch(e.target.value)\n  };\n\n  const getSearch = (e) =>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <form className=\"searchform\" onSubmit={getSearch}>\n        <input className=\"search\" type=\"text\" value={search} onChange={updateSearch}></input>\n        <button className=\"searchSubmit\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"content\"> \n      {\n        recepies.map(recepie => (\n          <Recepies\n            key={recepie.recipe.label}\n            title={recepie.recipe.label}\n            calories={recepie.recipe.calories}\n            img={recepie.recipe.image}\n            ingredients={recepie.recipe.ingredients}\n          />\n        )\n        )}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}